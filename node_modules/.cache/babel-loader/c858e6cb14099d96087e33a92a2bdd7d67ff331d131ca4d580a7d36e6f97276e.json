{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nutik\\\\OneDrive\\\\Desktop\\\\MERN_Development-\\\\src\\\\pages\\\\Admin\\\\Uploads.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Upload.css'; // Make sure you have a valid CSS file for styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminUpload() {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState({});\n  const handleFileChange = (e, documentName) => {\n    const file = e.target.files[0];\n    setSelectedFiles(prevFiles => ({\n      ...prevFiles,\n      [documentName]: file\n    }));\n  };\n  const handleUpload = documentName => {\n    const selectedFile = selectedFiles[documentName];\n    if (selectedFile) {\n      // In a real project, you may want to upload the file to a server instead of using local storage\n      const storageKey = `uploaded_${Date.now()}_${selectedFile.name}`; // Backticks to properly format the string\n      localStorage.setItem(storageKey, JSON.stringify(selectedFile));\n      alert(`Notification or document '${documentName}' uploaded successfully!`); // Backticks to properly format the string\n\n      // Clear the selected file and reset the input field\n      setSelectedFiles(prevFiles => ({\n        ...prevFiles,\n        [documentName]: null\n      }));\n      document.getElementById(`fileInput_${documentName}`).value = ''; // Backticks to properly format the string\n    } else {\n      alert(`Please select a '${documentName}' file first.`); // Backticks to properly format the string\n    }\n  };\n\n  const documentNames = ['Notification 1', 'Notification 2', 'Notification 3', 'Other Document'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Admin Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Document Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: documentNames.map(documentName => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: documentName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: `fileInput_${documentName}`,\n              onChange: e => handleFileChange(e, documentName),\n              accept: \".pdf, .doc, .docx\",\n              className: \"file-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleUpload(documentName),\n              className: \"upload-button\",\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, documentName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminUpload, \"On0XUuOoumk8/UuShGeKzzrnw44=\");\n_c = AdminUpload;\nexport default AdminUpload;\nvar _c;\n$RefreshReg$(_c, \"AdminUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AdminUpload","_s","selectedFiles","setSelectedFiles","handleFileChange","e","documentName","file","target","files","prevFiles","handleUpload","selectedFile","storageKey","Date","now","name","localStorage","setItem","JSON","stringify","alert","document","getElementById","value","documentNames","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","type","id","onChange","accept","onClick","_c","$RefreshReg$"],"sources":["C:/Users/nutik/OneDrive/Desktop/MERN_Development-/src/pages/Admin/Uploads.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Upload.css'; // Make sure you have a valid CSS file for styles\r\n\r\nfunction AdminUpload() {\r\n  const [selectedFiles, setSelectedFiles] = useState({});\r\n\r\n  const handleFileChange = (e, documentName) => {\r\n    const file = e.target.files[0];\r\n    setSelectedFiles((prevFiles) => ({\r\n      ...prevFiles,\r\n      [documentName]: file,\r\n    }));\r\n  };\r\n\r\n  const handleUpload = (documentName) => {\r\n    const selectedFile = selectedFiles[documentName];\r\n\r\n    if (selectedFile) {\r\n      // In a real project, you may want to upload the file to a server instead of using local storage\r\n      const storageKey = `uploaded_${Date.now()}_${selectedFile.name}`; // Backticks to properly format the string\r\n      localStorage.setItem(storageKey, JSON.stringify(selectedFile));\r\n      alert(`Notification or document '${documentName}' uploaded successfully!`); // Backticks to properly format the string\r\n\r\n      // Clear the selected file and reset the input field\r\n      setSelectedFiles((prevFiles) => ({\r\n        ...prevFiles,\r\n        [documentName]: null,\r\n      }));\r\n      document.getElementById(`fileInput_${documentName}`).value = ''; // Backticks to properly format the string\r\n    } else {\r\n      alert(`Please select a '${documentName}' file first.`); // Backticks to properly format the string\r\n    }\r\n  };\r\n\r\n  const documentNames = [\r\n    'Notification 1',\r\n    'Notification 2',\r\n    'Notification 3',\r\n    'Other Document',\r\n  ];\r\n\r\n  return (\r\n    <div className=\"file-upload-container\">\r\n      <h1>Admin Upload</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Document Type</th>\r\n            <th>File</th>\r\n            <th>Upload</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {documentNames.map((documentName) => (\r\n            <tr key={documentName}>\r\n              <td>{documentName}</td>\r\n              <td>\r\n                <input\r\n                  type=\"file\"\r\n                  id={`fileInput_${documentName}`}\r\n                  onChange={(e) => handleFileChange(e, documentName)}\r\n                  accept=\".pdf, .doc, .docx\"\r\n                  className=\"file-input\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <button\r\n                  onClick={() => handleUpload(documentName)}\r\n                  className=\"upload-button\"\r\n                >\r\n                  Upload\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminUpload;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}